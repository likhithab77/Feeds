package com.BITest;

import com.rabbitmq.client.*;
import java.io.IOException;



public class Rec {
	private static final String QUEUE_NAME = "camelotQueue";
    public static void main(String[] args) throws Exception{
	  ConnectionFactory factory = new ConnectionFactory();
	  //set connection info
	  
	  factory.setHost("10.100.146.95"); 
	  factory.setPort(30405);
	  factory.setUsername("lotos10");
	  factory.setPassword("lotos10");
	  //create the connection
	  
      Connection connection = factory.newConnection();
       
      // create the channel
       final Channel channel = connection.createChannel();

      System.out.println("Connection made successfully");
      channel.queueDeclare(QUEUE_NAME, true, false, false, null);
      System.out.println(" [*] Consumer : waiting for messages. To exit press CTRL+C");

	Consumer consumer = new DefaultConsumer(channel)
	{
	  @Override
	  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
	      throws IOException {
	    String message = new String(body, "UTF-8");
	    System.out.println(" [x] Received '" + message + "'");
	    long deliveryTag = envelope.getDeliveryTag();
	    System.out.println("Delivery Tag:" + deliveryTag);
	    channel.basicAck(deliveryTag, true);
	    System.out.println("Positive acknowledged Delivery Tag:" + deliveryTag);
	    int i = 0;
	    do {
	    if(i<deliveryTag)
	    {
	    	deliveryTag=i;
	    	channel.basicNack(i, true, true);
		    System.out.println("Negative acknowledged Delivery Tag:" + i);
		   
	    } 
	    else {
	    	break;
	    }
	    }
	  while(i++);
	  System.out.println("All messages are placed back in Queue");
	  } 
	  };
	boolean autoAck = false;
	channel.basicConsume(QUEUE_NAME, autoAck, consumer);
	Thread.sleep(20000);
	connection.close();
	    }
   
}