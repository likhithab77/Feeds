/**
 * 
 */
/**
 * @author Likhitha.Bathula
 *
 */
package com.comptroller;

import java.io.*;
import java.io.File;
import java.io.FileInputStream;


import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class comptrollerfiles {
	public static void main(String[] args) throws Exception {
		try {
			File file1 = new File("C:\\Users\\Likhitha.batthula\\Desktop\\Comptroller Voucher documentation\\sec004_Contractual_Schedule.xlsx");
			File file2 = new File("C:\\Users\\Likhitha.batthula\\Documents\\Comptrollersamples\\SEC004_Contractual.xlsx");
			FileInputStream fis1 = new FileInputStream(file1);
			FileInputStream fis2 = new FileInputStream(file2);
			
			XSSFWorkbook workbook1 = new XSSFWorkbook(fis1);
			XSSFWorkbook workbook2 = new XSSFWorkbook(fis2);

			XSSFSheet sheet1 = workbook1.getSheetAt(0);
			XSSFSheet sheet2 = workbook2.getSheetAt(0);

			if (compareTwoSheets(sheet1, sheet2)) {
				System.out.println("\n\nThe two excel sheets are Equal");
			} else {
				System.out.println("\n\nThe two excel sheets are Not Equal");
			}
			workbook1.close();
			workbook2.close();

		} catch (Exception e) {
			e.printStackTrace();

		}

	}

	// Compare Two Sheets
	public static boolean compareTwoSheets(XSSFSheet sheet1, XSSFSheet sheet2) throws InterruptedException {
		int firstRow1 = sheet1.getFirstRowNum();
		int lastRow1 = sheet1.getLastRowNum();
		boolean equalSheets = true;
		for (int i = firstRow1; i <= lastRow1; i++) {

			System.out.println("\n\nComparing Row " + i);

			XSSFRow row1 = sheet1.getRow(i);
			XSSFRow row2 = sheet2.getRow(i);
			//Thread.sleep(5000);
			if (!compareTwoRows(row1, row2)) {
				equalSheets = false;
				System.out.println("Row " + i + " - Not Equal");
				break;
			} else {
				System.out.println("Row " + i + " - Equal");
			}
		}
		return equalSheets;
	}

	// Compare Two Rows
	public static boolean compareTwoRows(XSSFRow row1, XSSFRow row2) throws InterruptedException {
		if ((row1 == null) && (row2 == null)) {
			return true;
		} else if ((row1 == null) || (row2 == null)) {
			return false;
		}

		int firstCell1 = row1.getFirstCellNum();
		int lastCell1 = row1.getLastCellNum();
		boolean equalRows = true;

		// Compare all cells in a row
		for (int i = firstCell1; i <= lastCell1; i++) {
			XSSFCell cell1 = row1.getCell(i);
			XSSFCell cell2 = row2.getCell(i);
		//	Thread.sleep(5000);
			if (!compareTwoCells(cell1, cell2)) {
				equalRows = false;
				System.err.println("       Cell " + i + " - NOt Equal");
				break;
			} else {
				System.out.println("       Cell " + i + " - Equal");
			}
		}
		return equalRows;
	}

	// Compare Two Cells
	public static boolean compareTwoCells(XSSFCell cell1, XSSFCell cell2) {
		if ((cell1 == null) && (cell2 == null)) {
			return true;
		} else if ((cell1 == null) || (cell2 == null)) {
			return false;
		}
		
		boolean equalCells = false;
		while (cell1.getCellType()==cell2.getCellType()){
			if(cell1.getCellStyle()==cell2.getCellStyle()) 
			{
				return equalCells;
		} 
			else {
				return false;
			}
	}
		return equalCells;
	}
