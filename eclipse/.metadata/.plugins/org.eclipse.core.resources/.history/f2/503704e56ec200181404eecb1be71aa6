package com.vzw.pos.automation.omni.acss.pages;

import java.io.FileNotFoundException;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.json.simple.JSONArray;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.FindBys;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;

import com.vzw.pos.automation.drivers.BasePage;
import junit.framework.Assert;

/**
 * Created by c0visr2 on 3/28/2018.
 */

public class AcssHomePage extends BasePage {

	// --------To get the class name of the Page-------
	private String className = Thread.currentThread().getStackTrace()[1].getClassName();
	private String pageName = className.substring(className.lastIndexOf('.') + 1);
	// ------------------------------------------------------------

	String qtwinID = "c0visr2";
	String qtwinPW = "Winter@2018";

	@FindBy(xpath = "//span[@class='ui-icon ui-icon-closethick']")
	WebElement iconCtiClose;

	@FindBy(xpath = "//input[@id='txtSearchId']")
	WebElement txtboxMdnSearch;

	@FindBy(xpath = "(//*[@id='ServiceChange_tab_0div'])[1]")
	WebElement menuOptionsServiceChange;

	@FindBy(xpath = "//a[@id='MDNOnlyChangeView_tab_0']")
	WebElement lnk_MDN;

	@FindBy(xpath = "//input[@id='goBtn']")
	WebElement btn_GoMdnsearch;

	@FindBy(xpath = "//div[contains(text(), 'Safeguard')]")
	WebElement lbl_txt_SafeGuard;

	@FindBy(xpath = "//span[contains(text(), 'Safeguard')]")
	WebElement lbl_txt_SafeGuard_pop_up;

	@FindBy(xpath = "//span[contains(text(), 'Dismiss')]//following-sibling::span")
	WebElement btn_Dismiss_SafeGuard;

	@FindBy(xpath = "//label[contains(text(), 'Dismiss Reason')]")
	WebElement lbl_txt__Dismiss_Reason;

	@FindBy(xpath = "//*[contains(text(),'Dismiss Reason')]/../following-sibling::td/table/tbody/tr/td[contains(@id,'combobox') and contains(@id,'inputCell')]/following-sibling::td/div[contains(@class,'trigger')]")
	WebElement drpdown_Dismiss_Reason;

	@FindBy(xpath = "//li[contains(text(), 'No MDN')]")
	WebElement drpdown_option_Dismiss_Reason;

	@FindBy(xpath = "//span[text()='ACSS - Safeguard']//ancestor::div//span[text()='Dismiss']")
	WebElement btn_Dismiss_Acss_safeguard;

	@FindBy(xpath = "//*[contains(@id,'ServiceCaseView') and contains(@id,'-innerCt')]")
	protected WebElement Seervicecase;

	@FindBy(xpath = "//*[text()='Upgrade Order']")
	protected WebElement CaseType;

	@FindBy(xpath = "//*[text()='Upgrade Order']//parent::td//parent::tr//td[contains(@class,'caseIdserviceCases_')]")
	protected WebElement CaseID;

	@FindBy(xpath = "//*[text()='Upgrade Order']//parent::td//parent::tr//td[contains(@data-qtip,'/')]/div")
	protected WebElement CaseDate;

	@FindBy(xpath = "//span[contains(text(), 'Critical Message')]")
	protected WebElement popup_Critical_Message;

	@FindBy(xpath = "//div[contains(text(), 'Critical Messages')]")
	protected WebElement lbl_txt_Critical_Messages;

	@FindBy(xpath = "//span[contains(text(), 'Critical Message')]/..//span[contains(text(), 'close')]")
	protected WebElement icon_close_Critical_Messages;

	@FindBy(xpath = "//li[contains(text(), 'Escalation') or contains(text(), 'Dead')]")
	WebElement drpdown_option_Dismiss_Reasons;

	@FindBy(xpath = "//*[contains(@class,'Alert Alert--error Grid u-marginTopLarge flex')]/p")
	WebElement alert_error;

	@FindBy(xpath = "(//a[@id='DeviceDetail_SeeUpgradeOptions_LinktopView_devicedetailexpand_PrimaryView_tab_0'])[2]")
	WebElement upgrade_options;
	// padma
	@FindBy(xpath = "//span[contains( text() , 'Continue')]")
	WebElement continueBtn;

	@FindBys({ @FindBy(xpath = "//img[contains(@class,'x-grid-checkcolumn')]") })
	List<WebElement> locChkBoxes;

	@FindBys({
			@FindBy(xpath = "//img[contains(@class,'x-grid-checkcolumn')]//ancestor::div[contains(@class,' x-grid-cell-inner-checkcolumn')]") })
	List<WebElement> locChkBoxesToClick;

	@FindBys({ @FindBy(xpath = "//*[contains(text(),'-01') and contains(@class,'x-grid-cell-inner')]") })
	List<WebElement> locationID;

	@FindBy(xpath = "//label[contains(text(), 'Pending')]/..")
	WebElement rdbtn_MdnChange_Pending_Cases;

	@FindBys({ @FindBy(xpath = "//a[text()[contains(.,'MDN-')]]") })
	List<WebElement> list_Mdn_Change_Pending_Cases;

	@FindBy(xpath = "//a[text()[contains(.,'MDN-')]]")
	WebElement list_Mdn_Change_Pending_Case;

	@FindBy(xpath = "//button[contains(@id, 'Reschedule_CancelClicked') and contains(text(), 'Cancel')]")
	WebElement btn_Pending_Cases_Cancel;

	@FindBy(xpath = "//*[contains(text(), 'Cancel Order?')]")
	WebElement lbl_txt_Cancel_Order;

	@FindBy(xpath = "//button[@id='DiscardChangesYes']")
	WebElement btn_Cancel_Order_Yes;

	@FindBy(xpath = "//span[text()='Refresh']/..")
	WebElement icon_Refresh;

	@FindBy(xpath = "//img[contains(@src,'/ccare/web/fw/images/loading-animation.gif')]")
	WebElement icon_Refresh_loader;

	@FindBy(xpath = "//*[contains(text(), 'No Pending Service Cases')]")
	WebElement lbl_txt_No_Pending_Cases;

	String ECE = "ECE";

	WebDriver driver;
	Map<String, JSONArray> testProperties;

	public AcssHomePage(WebDriver driver, Map<String, JSONArray> testProperties) {
		this.testProperties = testProperties;
		this.driver = driver;
		setDriver(driver);
		PageFactory.initElements(driver, this);
	}

	public void handleSafeGuard(Hashtable<String, String> table) throws FileNotFoundException, InterruptedException {
		if (isElementPresent(lbl_txt_SafeGuard_pop_up, 15)) {
			logger.debug("SafeGuard pop up is displayed");
			if (isElementPresent(lbl_txt_SafeGuard, 5)) {
				logger.debug("SafeGuard pop up is completely loaded");
				captureScreenshotPage(table, pageName);
				for (int i = 0; i < 4; i++) {
					clickonElementJS(driver, btn_Dismiss_SafeGuard,
							"Success: - Clicked Dismiss button on SafeGuard pop up",
							"Failed:- Not able to Click Dismiss button on SafeGuard pop up");
					if (!(isElementPresent(btn_Dismiss_SafeGuard, 5))) {
						logger.debug("Dismiss button has disappeared up on clicking on it successfully");
						break;
					} else {
						if (i == 3) {
							throwAppErrorByText(driver, "Unable to click Dismiss button");
						} else {
							logger.debug("Dismiss button has not disappeared up on clicking on it at " + (i + 1)
									+ "th attempt, Trying again in 3 Seconds");
							Thread.sleep(3000);
						}
					}
				}
			} else {
				throwAppErrorByText(driver, "SafeGuard pop up is not completely loaded");
			}
			if (isElementPresent(drpdown_Dismiss_Reason, 15)) {
				logger.debug("SafeGuard-Dismiss Reason drop down is displayed");
				captureScreenshotPage(table, pageName);
				for (int i = 0; i < 10; i++) {
					clickonElement(driver, drpdown_Dismiss_Reason, "Success: - Clicked on Dismiss Reason drop down ",
							"Failed:- Not able to Click on Dismiss Reason drop down ");
					if (isElementPresent(drpdown_option_Dismiss_Reasons, 3)) {
						logger.debug("Dismiss reason is displayed");
						break;
					} else {
						if (i == 9) {
							throwAppErrorByText(driver, "Dismiss reason is not loading in the drop down");
						} else {
							logger.debug("Dismiss reason is not loading in the drop down " + (i + 1)
									+ "th attempt, Trying again in 3 Seconds");
							Thread.sleep(3000);
						}
					}
				}
				captureScreenshotPage(table, pageName);
				clickonElementJS(driver, drpdown_option_Dismiss_Reason,
						"Success: - Selected Dismiss Reason from the drop down ",
						"Failed:- Not able to Select Dismiss Reason from the drop down ");
				for (int i = 0; i < 3; i++) {
					clickonElementJS(driver, btn_Dismiss_Acss_safeguard,
							"Success: - Clicked Dismiss button on Acss-Safeguard modal ",
							"Failed:- Not able to Click Dismiss button on Acss-Safeguard modal ");
					if (!(isElementPresent(btn_Dismiss_Acss_safeguard, 5))) {
						logger.debug(
								"Dismiss button on Acss-Safeguard modal has disapeared up on clicking on it successfully");
						break;
					} else {
						if (i == 2) {
							throwAppErrorByText(driver, "Unable to dismiss the SafeGuard");
						} else {
							logger.debug("Dismiss button has not disappeared up on clicking on it at " + (i + 1)
									+ "th attempt, Trying again in 3 Seconds");
							Thread.sleep(3000);
						}
					}
				}

			} else {
				throwAppErrorByText(driver, "SafeGuard-Dismiss Reason drop down is not displayed");
			}

		} else {
			logger.info("Customer is not a high risk profile customer");
		}
	}

	public void handleCtiModal(Hashtable<String, String> table) throws FileNotFoundException, InterruptedException {
		for (int i = 0; i < 4; i++) {
			if (switchToWindow(driver, "ACSS UAT")) {
				logger.debug("Success :- Swicthed to ACSS UAT at " + (i + 1) + "th attempt");
				break;
			} else {
				if (i == 3) {
					Assert.fail("APP ERROR :: Error displayed on screen... Unable to switch to ACSS UAT Window");
				}
				logger.debug("Unable to Swicth to ACSS UAT at " + (i + 1) + "th attempt, Re-Trying in 3 seconds");
				Thread.sleep(3000);
			}
		}
		if (isElementPresent(iconCtiClose, 5)) {
			logger.debug("CTI modal is displayed");
			captureScreenshotPage(table, pageName);
			for (int i = 0; i < 3; i++) {
				clickonElement(driver, iconCtiClose, "Success: - Clicked on Cti close icon",
						"Failed:- Not able to Click on Cti close icon");
				if (!(isElementPresent(iconCtiClose, 5))) {
					logger.debug("CTI modal is closed upon clicking the CTI close icon");
					break;
					
				}
			}
		} else {
			// throwAppErrorByText(driver, "CTI modal is not displayed");
			logger.debug("CTI modal is not displayed");
		}
		captureSessionDetails();
	}

	public void performMdnSearch(String mtn, Hashtable<String, String> table) throws Exception {
		if (isElementPresent(txtboxMdnSearch, 15)) {
			logger.debug("Mdn search text box is displayed");
			captureScreenshotPage(table, pageName);
			//for (int i = 0; i < 3; i++) {
				JSClick(txtboxMdnSearch);
				// setElementUsingJS(table.get("MDN"), txtboxMdnSearch, table);
				setElementUsingJS(mtn, txtboxMdnSearch);
				clickonElementJS(driver, btn_GoMdnsearch, "Success :- Clicked on MDN Search Go Button",
						"Failed :- Unable to Click on MDN Search Go Button");
				//if (isElementPresent(menuOptionsServiceChange, 100)
					//	&& (isElementClickable(driver, menuOptionsServiceChange, 3))) {
					//logger.debug("Success :- Intent Screen Loaded");
					captureScreenshotPage(table, pageName);
					//break;
				//} else {
				//	if (i == 2) {
					//	throwAppErrorByText(driver, "Unable to find Service Change Menu at Left Side Nav");
					//} else {
					//	logger.debug("Unable to find Service Change Menu at Side Nav at " + (i + 1)
						//		+ "th attempt, Trying again");
					//}
				//}
			//}
		} else {
			throwAppErrorByText(driver, "MDN search text box is not displayed");
		}
	}

	public void initiateMdnChangeFlow(Hashtable<String, String> table)
			throws FileNotFoundException, InterruptedException {
		if ((isElementPresent(menuOptionsServiceChange, 15))
				&& (isElementClickable(driver, menuOptionsServiceChange, 5))) {
			captureScreenshotPage(table, pageName);
			clickonElement(driver, menuOptionsServiceChange, "Success: - Clicked on Service change menu option",
					"Failed:- Not able to Click on Service change menu option");
		} else {
			throwAppErrorByText(driver, "Service Change menu option is not Displayed");
		}
		if (isElementPresent(lnk_MDN, 5)) {
			clickonElement(driver, lnk_MDN, "Success: - Clicked on mdn change link",
					"Failed:- Not able to Click on mdn change link");
			captureScreenshotPage(table, pageName);
		} else {
			throwAppErrorByText(driver, "MDN Only Link is not Displayed");
		}
		for (int i = 0; i < 5; i++) {
			if (switchToWindow(driver, "Verizon UAT")) {
				logger.debug("Success :- Swicthed to Verizon UAT");
				break;
			} else {
				logger.debug("Unable to Find Verizon UAT Window at" + (i + 1)
						+ " attempt, Trying to Click on MDN Only Link Again after 3 Seconds");
				clickonElement(driver, lnk_MDN, "Success: - Clicked on MDN Only link",
						"Failed:- Not able to Click on MDN Only Link");
				Thread.sleep(3000);
				if (i == 3) {
					throwAppErrorByText(driver, "Unable to Find Verizon UAT Window");
				}
			}
		}
		if (isElementPresent(alert_error, 5)) {
			String errormsg = alert_error.getText();
			if (!errormsg.toUpperCase().contains("PENDING")) {
				throwAppErrorByText(driver, errormsg);
			}
		}
	}

	public void openAndSwitchToWindow() throws InterruptedException, FileNotFoundException {
		int Handles = 0;
		String ParentWindow = null;
		ParentWindow = driver.getWindowHandle();
		for (int i = 0; i < 5; i++) {
			Handles = driver.getWindowHandles().size();
			if (Handles > 1) {
				logger.debug("Child Window is Launched");
				for (String winHandle : driver.getWindowHandles()) {
					if (!ParentWindow.equalsIgnoreCase(winHandle)) {
						driver.switchTo().window(winHandle);
						System.out.println(driver.getTitle());
					}
				}
				break;
			} else {
				if (i == 4) {
					throwAppErrorByText(driver, "Expecting ACSS Child Window, Never Launched");
				}
				logger.debug("Window Handle Size is " + Handles);
				Thread.sleep(3000);
			}
		}
	}

	public void setElementUsingJS(String mtn, WebElement element) throws Exception {
		try {
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			highLightElement(getDriver(), element);
			executor.executeScript("arguments[0].click();", element);
			executor.executeScript("arguments[0].setAttribute('value', " + mtn + ")", element);
			logger.debug("Success :- Entered text in Element " + element);
		} catch (Exception e) {
			logger.info("SCRIPT ERROR :: Unable to enter text in Element using JS" + element);
			throwError("SCRIPT ERROR :: Unable to enter text in Element using JS" + element);
		}
	}

	public void clickUsingJS(WebElement element) {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].click();", element);
	}

	public void OpenUpgradeCase() throws FileNotFoundException, InterruptedException {
		String parentWindow = getDriver().getWindowHandle();
		if (isElementPresent(driver, Seervicecase, 10)) {
			if (isElementPresent(driver, CaseType, 5)) {
				if (isElementPresent(driver, CaseID, 5)) {
					if (isElementPresent(driver, CaseDate, 5)) {
						clickonElement(driver, CaseID, "Successfully Clicked on CaseID", "Unable to Click on Case ID");
						switchToNewWindow(getDriver(), parentWindow);
					} else {
						throwAppErrorByText(driver, "Unable to find Case Date");
					}
				} else {
					throwAppErrorByText(driver, "Unable to find Case ID");
				}

			} else {
				throwAppErrorByText(driver, "Unable to find Upgrade Case");
			}
		} else {
			throwAppErrorByText(driver, "Unable to find Service Case tab");
		}
	}

	public String getCaseType() throws FileNotFoundException {
		String Casename = null;
		if (isElementPresent(driver, Seervicecase, 10)) {
			if (isElementPresent(driver, CaseType, 5)) {
				Casename = getElementText(driver, CaseType);
			} else {
				throwAppErrorByText(driver, "Unable to find Upgrade Case");
			}
		} else {
			throwAppErrorByText(driver, "Unable to find Service Case tab");
		}
		return Casename;
	}

	public String getCaseID() throws FileNotFoundException {
		String Caseid = null;
		if (isElementPresent(driver, CaseID, 5)) {
			Caseid = getElementText(driver, CaseID);
		} else {
			throwAppErrorByText(driver, "Unable to find Case ID");
		}
		return Caseid;
	}

	public String getCaseCreateedDate() throws FileNotFoundException {
		String Date = null;
		if (isElementPresent(driver, CaseDate, 5)) {
			Date = getElementText(driver, CaseDate);
		} else {
			throwAppErrorByText(driver, "Unable to find Case Date");
		}
		return Date;
	}

	public void handleCriticalMessagesPopUp(Hashtable<String, String> table)
			throws FileNotFoundException, InterruptedException {

		if (isElementPresent(popup_Critical_Message, 15)) {
			logger.debug("Critical Messages pop up is displayed");
			if (isElementPresent(lbl_txt_Critical_Messages, 30)) {
				logger.debug("Critical Messages pop up is completely loaded");
				captureScreenshotPage(table, pageName);
				clickonElement(driver, icon_close_Critical_Messages,
						"Success: - Clicked close icon on Critical Messages pop up",
						"Failed:- Not able to Click close icon on Critical Messages pop up");
			} else {
				throwAppErrorByText(driver, "Critical Messages pop up is not completely loaded");
			}

		} else {
			logger.info("Customer does not have any Critical Messages");
		}
	}

	public void captureSessionDetails() {
		String ID = null;
		String Name = null;
		try {
			ID = driver.manage().getCookieNamed("acsswebmscare").getValue();
			Name = driver.manage().getCookieNamed("acsswebmscare").getName();
			logger.debug("Session Details for " + Name + " is " + ID);
			captureRuntimeDetails(testProperties, pageName, "acsswebmscareSESSIONID", ID);
		} catch (Exception e) {
			logger.debug("Exception While Capturing Session Details");
		}
		try {
			ID = driver.manage().getCookieNamed("SMSESSION").getValue();
			Name = driver.manage().getCookieNamed("SMSESSION").getName();
			logger.debug("Session Details for " + Name + " is " + ID);
			captureRuntimeDetails(testProperties, pageName, "SMSESSION", ID);
		} catch (Exception e) {
			logger.debug("Exception While Capturing Session Details");

		}
	}

	// padma
	public void clickUpgradeOptions() throws FileNotFoundException, InterruptedException {
		if (isElementClickable(driver, upgrade_options, 30)) {
			clickonElement(driver, upgrade_options, "Success:- Clicked on UpgradeOptions",
					"Failure:- Unable to click on UpgradeOptions");
		} else {
			throwAppErrorByText(driver, "Upgradte options Button is not clickable");
		}
	}

	public void selectLocation(Hashtable<String, String> dataTable) throws FileNotFoundException, InterruptedException {
		WebElement CheckBoxLocationCode = null;// Represents the location code
												// to click
		WebElement CheckBoxLocationToClick = null;// Represents the check box to
													// click
		String LocationNumber = null;
		if (isElementPresent(continueBtn, 30)) {
			logger.debug("Success :- Location Selection Pop Up is displayed");
		} else {
			throwAppErrorByText(driver, "Location Selection Pop Up is Not displayed");
		}
		WaitforDynamicElement(driver, "(//img[contains(@class,'x-grid-checkcolumn')])[1]");
		int LocationSize = locChkBoxes.size();
		if (LocationSize == 0) {
			throwAppErrorByText(driver, "Location Check Boxes are not loaded");
		}
		LocationSize = randomIntGenerator(LocationSize); // reusing the variable
		logger.debug("Random Location Number is " + LocationSize);
		CheckBoxLocationCode = locChkBoxes.get(LocationSize);
		CheckBoxLocationToClick = locChkBoxes.get(LocationSize);

		try {
			LocationNumber = locationID.get(LocationSize).getText();
			logger.debug("Random Location Number Selected is " + LocationNumber);
		} catch (Exception e) {
			Assert.fail("Unable to find location Code");
		}
		captureRuntimeDetails(testProperties, "LocationCode", "LocationCode", LocationNumber);
		scrollTo(CheckBoxLocationToClick);
		if (!CheckBoxLocationCode.getAttribute("class").toUpperCase().contains("CHECKED")) {
			clickonElementJS(driver, CheckBoxLocationToClick, "Success :- Clicked on Location Code " + LocationNumber,
					"Failed :- Unable to Click on Location Code");

			/*
			 * if(!CheckBoxLocationCode.getAttribute("class").toUpperCase().
			 * contains("CHECKED")){ clickonElementJS(driver,
			 * CheckBoxLocationToClick, "Success :- Clicked on Location Code "
			 * +LocationNumber, "Failed :- Unable to Click on Location Code"); }
			 */
		} else {
			logger.debug("By Default, Location Code " + LocationNumber + " is Checked");
		}
		captureScreenshotPage(dataTable, pageName);
		clickonElement(driver, continueBtn, "Success :- Clicked on Location Code Continue button",
				"Failed :- Unable to click on Location Code Continue button");

	}

	public void cleanMdnChangePendingOrders(Hashtable<String, String> table)
			throws FileNotFoundException, InterruptedException {

		String pendingcaseid = null;

		if (isElementPresent(rdbtn_MdnChange_Pending_Cases, 10)) {
			logger.debug("Pending cases option is displayed in Service Cases section");
			clickonElement(driver, rdbtn_MdnChange_Pending_Cases,
					"Success: - Clicked on Pending cases radio button in service cases section",
					"Failed:- Not able to Click on Pending cases radio button in service cases section");
			captureScreenshotPage(table, pageName);
			Thread.sleep(3000);
			int numberofMdnChangePendingOrders = list_Mdn_Change_Pending_Cases.size();

			if (numberofMdnChangePendingOrders == 0) {
				logger.debug("No Pending orders exist for this account.. ");
			} else {

				try {

					for (int i = 0; i < numberofMdnChangePendingOrders; i++) {
						pendingcaseid = list_Mdn_Change_Pending_Cases.get(0).getText();
						clickonElement(driver, list_Mdn_Change_Pending_Cases.get(0),
								"Success: - Clicked on Mdn Change pending case " + pendingcaseid + "",
								"Failed:- Not able to Click Mdn Change pending case " + pendingcaseid + "");

						switchtoWindow("Verizon UAT");
						waitForTriLoadIconToDisappear(ECE);
						if (isElementPresent(btn_Pending_Cases_Cancel, 5)) {
							logger.debug("Cancel Number change button is displayed");
							captureScreenshotPage(table, pageName);
							clickonElement(driver, btn_Pending_Cases_Cancel,
									"Success: - Clicked on Cancel Number change button",
									"Failed:- Not able to Click on Cancel Number change button");
							if (isElementPresent(lbl_txt_Cancel_Order, 5)
									&& isElementPresent(btn_Cancel_Order_Yes, 5)) {
								logger.debug("Cancel Order confirmation pop up is displayed");
								captureScreenshotPage(table, pageName);
								clickonElement(driver, btn_Cancel_Order_Yes,
										"Success: - Clicked Yes on Cancel Order confirmation pop up",
										"Failed:- Not able to Click Yes on Cancel Order confirmation pop up");
								// waitForTriLoadIconToDisappear(ECE);
								switchtoWindow("ACSS UAT");
								refreshAccountDetails(table);

								if (!isElementPresent(list_Mdn_Change_Pending_Case, 5)
										|| isElementPresent(lbl_txt_No_Pending_Cases, 5)) {
									logger.debug("All Mdn change Pending orders have been cleared..");
									break;
								}
							} else {
								throwAppErrorByText(driver, " Cancel Order confirmation pop up is not displayed");
							}
						} else {
							throwAppErrorByText(driver,
									" Cancel Number change button is displayed.. can not cancel pending order");
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					switchtoWindow("ACSS UAT");
				}

			}

		} else {
			throwAppErrorByText(driver, " Pending cases option is not displayed in Service Cases section");
		}
	}

	public void switchtoWindow(String windowid) throws InterruptedException, FileNotFoundException {
		for (int j = 0; j < 5; j++) {
			if (switchToWindow(driver, windowid)) {
				logger.debug("Success :- Swicthed to Window "+windowid);
				break;
			} else {
				logger.debug("Unable to Find Window" +windowid+ "at" + (j + 1)
						+ " attempt, Trying to switch Again after 3 Seconds");

				Thread.sleep(3000);
				if (j == 3) {
					throwAppErrorByText(driver, "Unable to Find Window" +windowid);
				}
			}
		}
	}

	public void refreshAccountDetails(Hashtable<String, String> table)
			throws FileNotFoundException, InterruptedException {
		for (int i = 0; i < 2; i++) {
			if (isElementPresent(icon_Refresh, 15)) {
				logger.debug("Refresh icon is present in Acss home page");
				clickonElement(driver, icon_Refresh, "Success:- Clicked on Refresh icon to refresh the open cases: ",
						"Failed:- Not able to Click on Refresh icon to refresh the open cases: ");
				waitForRefreshLoadIconToDisappear();
			} else {
				throwAppErrorByText(driver, " Refresh icon is not loaded on Acss Home page");
			}
		}
	}

	public void waitForRefreshLoadIconToDisappear() {
		long startTime = System.currentTimeMillis();

		logger.debug("------------------waitForLoadIconToDisappear----------------");
		if (isElementPresent(icon_Refresh_loader, 5)) {
			FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver);
			wait.withTimeout(250, TimeUnit.SECONDS).pollingEvery(2, TimeUnit.SECONDS)
					.ignoring(NoSuchElementException.class);
			wait.withMessage("APP ERROR :: Waited 250 secs for load image to no longer be visible.");
			wait.until(ExpectedConditions.invisibilityOfElementLocated(
					By.xpath("//img[contains(@src,'/ccare/web/fw/images/loading-animation.gif')]")));
			long endTime = System.currentTimeMillis();
			long totalTime = endTime - startTime;
			logger.debug("Total secs taken for loading icon to disappear after visibility in ms : " + totalTime);
		} else {
			long endTime = System.currentTimeMillis();
			long totalTime = endTime - startTime;
			logger.debug("Waited in try, loading icon did not appear in ms: " + totalTime);
		}
	}

}
